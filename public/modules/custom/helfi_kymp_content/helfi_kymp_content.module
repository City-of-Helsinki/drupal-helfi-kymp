<?php

/**
 * @file
 * Contains alterations for content.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\helfi_kymp_content\DistrictUtility;
use Drupal\helfi_platform_config\DTO\ParagraphTypeCollection;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\paragraphs\ParagraphInterface;

/**
 * Implements hook_theme().
 */
function helfi_kymp_content_theme() {
  return [
    'subdistricts_navigation' => [
      'variables' => [
        'navigation' => NULL,
        'parent_title' => NULL,
        'parent_url' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_kymp_content_preprocess_block(&$variables) {
  if ($variables['plugin_id'] !== 'hero_block') {
    return;
  }

  // Get current entity and entity version.
  $entity_matcher = \Drupal::service('helfi_platform_config.entity_version_matcher')->getType();

  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
  $entity = $entity_matcher['entity'];

  // No need to continue if current entity doesn't have hero set.
  if (
    !$entity instanceof ContentEntityInterface ||
    !$entity->hasField('field_has_hero') ||
    !(bool) $entity->get('field_has_hero')->value ||
    $entity->get('field_content')->isEmpty()
  ) {
    return;
  }
  $paragraph = $entity->get('field_content')->first()->get('entity')->getValue();

  if (
    empty($paragraph) ||
    !in_array($entity->bundle(), ['landing_page', 'page']) ||
    !$paragraph instanceof ParagraphInterface
  ) {
    return;
  }
  $first_paragraph_gray = &$variables['content']['hero_block']['#first_paragraph_grey'];

  // Check if the content field first paragraph is District and project
  // search and add classes accordingly.
  switch ($paragraph->getType()) {
    case 'district_and_project_search':
      $first_paragraph_gray = 'has-first-gray-bg-block';
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_form_alter().
 */
function helfi_kymp_content_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#validate'][] = 'helfi_kymp_content_node_form_validate';

  switch ($form_id) {
    case 'node_district_edit_form':
    case 'node_district_form':
      // Control Hero paragraph visibility via checkbox states.
      $form['field_hero']['#states'] = [
        'visible' => [
          ':input[name="field_has_hero[value]"]' => ['checked' => TRUE],
        ],
      ];
      break;
  }
  // Custom submit callback.
  $form['actions']['submit']['#submit'][] = 'hdbt_admin_tools_node_form_submit_callback';
}

/**
 * Custom validation function for node form.
 */
function helfi_kymp_content_node_form_validate($form, FormStateInterface $form_state) {
  $formObject = $form_state->getFormObject();
  assert($formObject instanceof EntityFormInterface);
  $node = $formObject->getEntity();

  if ($node->bundle() == 'project') {
    $project_plan_schedule = $form_state->getValue('field_project_plan_schedule');
    $plan_start = $project_plan_schedule[0]['value'];
    $plan_end = $project_plan_schedule[0]['end_value'];

    $project_execution_schedule = $form_state->getValue('field_project_execution_schedule');
    $execution_start = $project_execution_schedule[0]['value'];
    $execution_end = $project_execution_schedule[0]['end_value'];

    // Either project plan or execution schedule is required.
    if ((is_null($plan_start) && is_null($plan_end)) && (is_null($execution_start) && is_null($execution_end))) {
      $error_message = t('Please fill either plan or execution schedule.', [], ['context' => 'helfi_kymp_content_project']);

      $error_fields = [
        'field_project_plan_schedule][0][value][date',
        'field_project_execution_schedule][0][value][date',
        'field_project_plan_schedule][0][end_value][date',
        'field_project_execution_schedule][0][end_value][date',
      ];

      foreach ($error_fields as $error_field_name) {
        $form_state->setErrorByName($error_field_name, $error_message);
      }

      \Drupal::messenger()->addMessage(t('Please fill either plan or execution schedule.', [], ['context' => 'helfi_kymp_content_project']), 'error');
    }
  }
}

/**
 * Helper function to create District nodes.
 *
 * Helper function to create District nodes with translations
 * from Project district taxonomy terms.
 */
function _helfi_kymp_content_create_district_nodes_from_taxonomy_terms() {
  $original_lang = 'fi';
  $translation_languages = ['sv', 'en'];
  $vocabulary = 'project_district';
  $entity_type_manager = \Drupal::entityTypeManager();
  $term_storage = $entity_type_manager->getStorage('taxonomy_term');

  $tids = $term_storage->getQuery()
    ->condition('vid', $vocabulary)
    ->condition('langcode', $original_lang)
    ->accessCheck(FALSE)
    ->execute();

  $terms = $term_storage->loadMultiple($tids);

  foreach ($terms as $term) {
    $existing_project_nodes = $entity_type_manager
      ->getStorage('node')
      ->loadByProperties([
        'title' => $term->getName(),
        'langcode' => $original_lang,
        'type' => 'district',
      ]);

    // Add new project node only if it doesn't exist.
    if (empty($existing_project_nodes)) {
      $node = Node::create([
        'type' => 'district',
        'title' => $term->getName(),
        'uid' => 1,
        'status' => 0,
      ]);
      $node->save();
    }
    else {
      $node = reset($existing_project_nodes);
    }

    foreach ($translation_languages as $lang) {
      // Add translations if those don't exist.
      if (!$term->hasTranslation($lang)) {
        continue;
      }

      if (!$node->hasTranslation($lang)) {
        /** @var \Drupal\taxonomy\TermInterface $translated_term */
        $translated_term = \Drupal::service('entity.repository')->getTranslationFromContext($term, $lang);
        $node_translation = $node->addTranslation($lang);
        $node_translation->set('title', $translated_term->getName());
        $node_translation->set('uid', 1);
        $node_translation->set('status', 0);
        $node_translation->save();
      }
    }
  }
}

/**
 * Implements hook_node_update().
 */
function helfi_kymp_content_node_update(NodeInterface $node) {
  if ($node->getType() === 'district') {
    _helfi_kymp_content_invalidate_subdistricts($node);
  }
}

/**
 * Implements hook_node_insert().
 */
function helfi_kymp_content_node_insert(NodeInterface $node) {
  if ($node->getType() === 'district') {
    _helfi_kymp_content_invalidate_subdistricts($node);
  }
}

/**
 * Implements hook_node_delete().
 */
function helfi_kymp_content_node_delete(NodeInterface $node) {
  if ($node->getType() === 'district') {
    _helfi_kymp_content_invalidate_subdistricts($node);
  }
}

/**
 * Invalidate cache for nodes that are referenced as sub-districts.
 */
function _helfi_kymp_content_invalidate_subdistricts(NodeInterface $node) {
  if (!$node->hasField('field_subdistricts')) {
    return;
  }

  $subdistricts = $node->get('field_subdistricts')->referencedEntities();
  foreach ($subdistricts as $subdistrict) {
    if (!$subdistrict instanceof NodeInterface) {
      continue;
    }
    Cache::invalidateTags(['node:' . $subdistrict->id()]);
  }
}

/**
 * Implements hook_sidebar_visibility_allowed_entities_alter().
 *
 * Adds district and project content types to the list that allows
 * displaying sidebar (such as sub-navigation).
 */
function helfi_kymp_content_sidebar_visibility_allowed_entities_alter(&$entities) {
  $entities['district'] = 'node';
  $entities['project'] = 'node';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_kymp_content_preprocess_page(&$variables) {
  $variables['has_section_nav'] = FALSE;

  // District content type alterations.
  $node = hdbt_admin_tools_get_page_entity();
  if ($node instanceof NodeInterface) {
    if ($node->getType() === 'district') {
      // Handle first and second sidebar visibility for the "District"
      // content type.
      helfi_kymp_content_sidebar_menu_visibility($variables, $node);

      // Enable section navigation for "District" content type.
      $variables['has_section_nav'] = TRUE;
    }
  }
}

/**
 * Handle sidebar visibility based on district relationships.
 *
 * @param array $variables
 *   Variables array.
 * @param \Drupal\node\NodeInterface $node
 *   Node entity.
 */
function helfi_kymp_content_sidebar_menu_visibility(array &$variables, NodeInterface $node) {
  if (!$node->hasField('field_subdistricts')) {
    return;
  }

  // Hide the sidebar and menu if the current entity has
  // "hide sidebar navigation" value set.
  if (!$node->get('field_subdistricts')->isEmpty()) {
    $variables['has_sidebar_first'] = TRUE;
  }
  elseif (!empty(DistrictUtility::getSubdistrictParentIds($node))) {
    $variables['has_sidebar_first'] = TRUE;
  }
}

/**
 * Implements hook_helfi_paragraph_types().
 */
function helfi_kymp_content_helfi_paragraph_types() : array {
  $entities = [
    'node' => [
      'page' => [
        'field_content' => [
          'journey_planner' => 18,
          'list_of_plans' => 19,
          'ploughing_schedule' => 20,
        ],
        'field_lower_content' => [
          'list_of_plans' => 18,
        ],
      ],
      'landing_page' => [
        'field_content' => [
          'district_and_project_search' => 18,
          'list_of_plans' => 19,
        ],
      ],
    ],
    'paragraphs_library_item' => [
      'paragraphs_library_item' => [
        'paragraphs' => [
          'district_and_project_search' => 1,
          'list_of_plans' => 2,
        ],
      ],
    ],
  ];

  $enabled = [];
  foreach ($entities as $entityTypeId => $bundles) {
    foreach ($bundles as $bundle => $fields) {
      foreach ($fields as $field => $paragraphTypes) {
        foreach ($paragraphTypes as $paragraphType => $weight) {
          $enabled[] = new ParagraphTypeCollection($entityTypeId, $bundle, $field, $paragraphType, $weight);
        }
      }
    }
  }
  return $enabled;
}
