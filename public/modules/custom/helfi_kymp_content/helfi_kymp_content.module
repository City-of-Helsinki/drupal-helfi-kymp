<?php

/**
 * @file
 * Contains alterations for content.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_kymp_content_preprocess_block(&$variables) {
  if ($variables["plugin_id"] !== 'hero_block') {
    return;
  }

  // Get current entity and entity version.
  $entity_matcher = \Drupal::service('hdbt_content.entity_version_matcher')->getType();

  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
  $entity = $entity_matcher['entity'];

  // No need to continue if current entity doesn't have has_hero field.
  if (
    !$entity instanceof ContentEntityInterface ||
    !$entity->hasField('field_has_hero')
  ) {
    return;
  }

  if ((bool) $entity->get('field_has_hero')->value) {
    if (
      in_array($entity->getType(), ['landing_page', 'page']) &&
      isset($entity->get('field_content')->first()->entity)
    ) {

      $first_paragraph_gray = &$variables['content']['hero_block']['#first_paragraph_grey'];

      // Check if the content field first paragraph is District and project
      // search or District listing and add classes accordingly.
      $paragraph = $entity->get('field_content')->first()->entity;
      if (!empty($paragraph)) {
        switch ($paragraph->getType()) {
          case 'district_and_project_search':
          case 'district_listing':
            $first_paragraph_gray = 'has-first-gray-bg-block';
            break;
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_form_alter().
 */
function helfi_kymp_content_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $form['#validate'][] = 'helfi_kymp_content_node_form_validate';
}

/**
 * Custom validation function for node form.
 */
function helfi_kymp_content_node_form_validate($form, FormStateInterface $form_state) {
  $node = $form_state->getFormObject()->getEntity();

  if ($node->getType() == 'project') {
    $project_plan_schedule = $form_state->getValue('field_project_plan_schedule');
    $plan_start = $project_plan_schedule[0]['value'];
    $plan_end = $project_plan_schedule[0]['end_value'];

    $project_execution_schedule = $form_state->getValue('field_project_execution_schedule');
    $execution_start = $project_execution_schedule[0]['value'];
    $execution_end = $project_execution_schedule[0]['end_value'];

    // Either project plan or execution schedule is required.
    if ((is_null($plan_start) && is_null($plan_end)) && (is_null($execution_start) && is_null($execution_end))) {
      $error_message = t('Please fill either plan or execution schedule.', [], ['context' => 'helfi_kymp_content_project']);

      $error_fields = [
        'field_project_plan_schedule][0][value][date',
        'field_project_execution_schedule][0][value][date',
        'field_project_plan_schedule][0][end_value][date',
        'field_project_execution_schedule][0][end_value][date',
      ];

      foreach ($error_fields as $error_field_name) {
        $form_state->setErrorByName($error_field_name, $error_message);
      }

      \Drupal::messenger()->addMessage(t('Please fill either plan or execution schedule.', [], ['context' => 'helfi_kymp_content_project']), 'error');
    }
  }
}

/**
 * Helper function to create District nodes.
 *
 * Helper function to create District nodes with translations
 * from Project district taxonomy terms.
 */
function _helfi_kymp_content_create_district_nodes_from_taxonomy_terms() {
  $original_lang = 'fi';
  $translation_languages = ['sv', 'en'];
  $vocabulary = 'project_district';
  $entity_type_manager = \Drupal::entityTypeManager();
  $term_storage = $entity_type_manager->getStorage('taxonomy_term');

  $query = $term_storage->getQuery();
  $query->condition('vid', $vocabulary);
  $query->condition('langcode', $original_lang);
  $tids = $query->execute();
  $terms = $term_storage->loadMultiple($tids);

  foreach ($terms as $term) {
    $existing_project_nodes = $entity_type_manager
      ->getStorage('node')
      ->loadByProperties([
        'title' => $term->getName(),
        'langcode' => $original_lang,
        'type' => 'district',
      ]);

    // Add new project node only if it doesn't exist.
    if (empty($existing_project_nodes)) {
      $node = Node::create([
        'type' => 'district',
        'title' => $term->getName(),
        'uid' => 1,
        'status' => 0,
      ]);
      $node->save();
    }
    else {
      $node = reset($existing_project_nodes);
    }

    foreach ($translation_languages as $lang) {
      // Add translations if those don't exist.
      if (!$term->hasTranslation($lang)) {
        continue;
      }

      if (!$node->hasTranslation($lang)) {
        $translated_term = \Drupal::service('entity.repository')->getTranslationFromContext($term, $lang);
        $node_translation = $node->addTranslation($lang);
        $node_translation->set('title', $translated_term->getName());
        $node_translation->set('uid', 1);
        $node_translation->set('status', 0);
        $node_translation->save();
      }
    }
  }
}
