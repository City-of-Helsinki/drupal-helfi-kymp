<?php

/**
 * @file
 * Contains alterations for content.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\helfi_kymp_content\DistrictUtility;
use Drupal\node\NodeInterface;

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_kymp_content_preprocess_block(&$variables) {
  if ($variables["plugin_id"] !== 'hero_block') {
    return;
  }

  // Get current entity and entity version.
  $entity_matcher = \Drupal::service('hdbt_content.entity_version_matcher')->getType();

  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
  $entity = $entity_matcher['entity'];

  // No need to continue if current entity doesn't have has_hero field.
  if (
    !$entity instanceof ContentEntityInterface ||
    !$entity->hasField('field_has_hero')
  ) {
    return;
  }

  if ((bool) $entity->get('field_has_hero')->value) {
    if (
      in_array($entity->getType(), ['landing_page', 'page']) &&
      isset($entity->get('field_content')->first()->entity)
    ) {

      $first_paragraph_gray = &$variables['content']['hero_block']['#first_paragraph_grey'];

      // Check if the content field first paragraph is District and project
      // search or District listing and add classes accordingly.
      $paragraph = $entity->get('field_content')->first()->entity;
      if (!empty($paragraph)) {
        switch ($paragraph->getType()) {
          case 'district_and_project_search':
          case 'district_listing':
            $first_paragraph_gray = 'has-first-gray-bg-block';
            break;
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_form_alter().
 */
function helfi_kymp_content_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#validate'][] = 'helfi_kymp_content_node_form_validate';

  switch ($form_id) {
    case 'node_district_edit_form':
    case 'node_district_form':
      // Control Hero paragraph visibility via checkbox states.
      $form['field_hero']['#states'] = [
        'visible' => [
          ':input[name="field_has_hero[value]"]' => ['checked' => TRUE],
        ],
      ];
      break;
  }
  // Custom submit callback.
  $form['actions']['submit']['#submit'][] = 'hdbt_admin_editorial_node_form_submit_callback';
}

/**
 * Custom validation function for node form.
 */
function helfi_kymp_content_node_form_validate($form, FormStateInterface $form_state) {
  $node = $form_state->getFormObject()->getEntity();

  if ($node->getType() == 'project') {
    $project_plan_schedule = $form_state->getValue('field_project_plan_schedule');
    $plan_start = $project_plan_schedule[0]['value'];
    $plan_end = $project_plan_schedule[0]['end_value'];

    $project_execution_schedule = $form_state->getValue('field_project_execution_schedule');
    $execution_start = $project_execution_schedule[0]['value'];
    $execution_end = $project_execution_schedule[0]['end_value'];

    // Either project plan or execution schedule is required.
    if ((is_null($plan_start) && is_null($plan_end)) && (is_null($execution_start) && is_null($execution_end))) {
      $error_message = t('Please fill either plan or execution schedule.', [], ['context' => 'helfi_kymp_content_project']);

      $error_fields = [
        'field_project_plan_schedule][0][value][date',
        'field_project_execution_schedule][0][value][date',
        'field_project_plan_schedule][0][end_value][date',
        'field_project_execution_schedule][0][end_value][date',
      ];

      foreach ($error_fields as $error_field_name) {
        $form_state->setErrorByName($error_field_name, $error_message);
      }

      \Drupal::messenger()->addMessage(t('Please fill either plan or execution schedule.', [], ['context' => 'helfi_kymp_content_project']), 'error');
    }
  }
}

/**
 * Implements hook_sidebar_visibility_allowed_entities_alter().
 *
 * Adds district and project content types to the list that allows
 * displaying sidebar (such as sub-navigation).
 */
function helfi_kymp_content_sidebar_visibility_allowed_entities_alter(&$entities) {
  $entities['district'] = 'node';
  $entities['project'] = 'node';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_kymp_content_preprocess_page(&$variables) {
  // Handle sidebar visibility.
  $node = hdbt_content_get_page_entity();
  if ($node instanceof NodeInterface) {
    // Handle first and second sidebar visibility for the "Standard page" (page)
    // content type.
    if ($node->getType() === 'district') {
      helfi_kymp_content_sidebar_menu_visibility($variables, $node);
    }
  }
}

/**
 * Handle sidebar visibility based on district relationships.
 *
 * @param array $variables
 *   Variables array.
 * @param \Drupal\node\NodeInterface $node
 *   Node entity.
 */
function helfi_kymp_content_sidebar_menu_visibility(array &$variables, NodeInterface $node) {
  if (!$node->hasField('field_subdistricts')) {
    return;
  }

  // Hide the sidebar and menu if the current entity has
  // "hide sidebar navigation" value set.
  if (!$node->get('field_subdistricts')->isEmpty()) {
    $variables['has_sidebar_first'] = TRUE;
  }
  elseif (!empty(DistrictUtility::getSubdistrictParentIds($node))) {
    $variables['has_sidebar_first'] = TRUE;
  }
}
