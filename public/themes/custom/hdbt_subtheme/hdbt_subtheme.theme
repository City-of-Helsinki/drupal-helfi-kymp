<?php

/**
 * @file
 * Functions to support theming in the HDBT Subtheme.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Url;

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_subtheme_preprocess_block(&$variables) {
  if (isset($variables['elements']['#id'])) {
    $variables['content']['#attributes']['block_id'] = $variables['elements']['#id'];
  }

  // Hides page title block from node type district.
  if ($variables['plugin_id'] == 'page_title_block') {
    $page_entity = hdbt_content_get_page_entity();
    if (
      $page_entity instanceof ContentEntityInterface &&
      $page_entity->hasField('field_hero') &&
      $page_entity->getType() == 'district'
    ) {
      $variables['hide_block'] = TRUE;
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hdbt_subtheme_theme_suggestions_block_alter(&$suggestions) {
  // Load theme suggestions for blocks from parent theme.
  foreach ($suggestions as &$suggestion) {
    $suggestion = str_replace('hdbt_subtheme_', '', $suggestion);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Provide block based menu suggestions.
 */
function hdbt_subtheme_theme_suggestions_menu_alter(&$suggestions, $variables) {
  if (isset($variables['attributes']['block_id'])) {
    $block_id = str_replace('hdbt_subtheme_', '', $variables['attributes']['block_id']);

    switch ($block_id) {
      case 'mobile_navigation':
        $suggestions[] = 'menu__mobile';
        break;

      case 'mainnavigation':
        $suggestions[] = 'menu__main__desktop';
        break;

      case 'main_navigation_level_2':
        $suggestions[] = 'menu__main__sidebar';
        break;

      case 'brandingnavigation':
        $suggestions[] = 'menu__main__branding';
        break;

      default:
        $suggestions[] = 'menu__' . $variables['attributes']['block_id'];
        break;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_subtheme_preprocess_paragraph__project_listing(&$variables) {
  $paragraph = $variables['paragraph'];
  $selected_district = $paragraph->get('field_district_taxonomy')->target_id;
  $variables['selected_district'] = $selected_district;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_subtheme_preprocess_views_view__project_list(&$variables) {
  // Set the search link for Refine search button using config.
  $projectSearchConfig = Drupal::config('helfi_kymp_content.project_search');
  if ($projectSearchPath = $projectSearchConfig->get('project_search_path')) {
    $variables['search_link'] = Url::fromUserInput($projectSearchPath)->toString();
  }
}
